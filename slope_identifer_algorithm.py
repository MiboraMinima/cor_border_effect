# -*- coding: utf-8 -*-

"""
/***************************************************************************
 SlopeIndentifier
                                 A QGIS plugin
 This plugin removes border effect on DOD of cliff top boulders (CTD)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-22
        copyright            : (C) 2023 by LETG, IUEM (Plouzané, FR)
        email                : antoineledoeuff@yahoo.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'LETG, IUEM (Plouzané, FR)'
__date__ = '2023-05-22'
__copyright__ = '(C) 2023 by LETG, IUEM (Plouzané, FR)'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterString,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterRasterDestination,
                       QgsRasterLayer)
from qgis.analysis import (QgsRasterCalculator,
                           QgsRasterCalculatorEntry)
import processing
import os
import re
import geopandas as gpd


class SlopeIndentifierAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'INPUT'
    OUTPUT_SLOPE = 'OUTPUT_SLOPE'
    OUTPUT_DX = 'OUTPUT_DX'
    OUTPUT_DY = 'OUTPUT_DY'
    OUTPUT_DXX = 'OUTPUT_DXX'
    OUTPUT_DYY = 'OUTPUT_DYY'
    OUTPUT_DXY = 'OUTPUT_DXY'
    OUTPUT_MASK = 'OUTPUT_MASK'
    OUTPUT_DOD = 'OUTPUT_DOD'

    def initAlgorithm(self, config):

        # INPUT
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('DOD to correct'),
                defaultValue=None
            )
        )

        # OUTPUT
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_SLOPE,
                self.tr('General slope extracted from the DOD'),
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_DX,
                self.tr('First order partial derivative dx (E-W slope) raster map'),
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_DY,
                self.tr('first order partial derivative dy (N-S slope) raster map'),
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_DXX,
                self.tr('Second order partial derivative dxx raster map'),
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_DYY,
                self.tr('Second order partial derivative dyy raster map'),
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_DXY,
                self.tr('Second order partial derivative dxy raster map'),
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_MASK,
                self.tr('Raster mask generated from slope parameters'),
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT_DOD,
                self.tr('DOD cleaned')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.

        dod = self.parameterAsRasterLayer(parameters, self.INPUT, context)

        dod_slope = self.parameterAsOutputLayer(parameters, self.OUTPUT_SLOPE, context)
        dod_dx = self.parameterAsOutputLayer(parameters, self.OUTPUT_DX, context)
        dod_dy = self.parameterAsOutputLayer(parameters, self.OUTPUT_DY, context)
        dod_dxx = self.parameterAsOutputLayer(parameters, self.OUTPUT_DXX, context)
        dod_dyy = self.parameterAsOutputLayer(parameters, self.OUTPUT_DYY, context)
        dod_dxy = self.parameterAsOutputLayer(parameters, self.OUTPUT_DXY, context)
        slope_mask = self.parameterAsOutputLayer(parameters, self.OUTPUT_MASK, context)
        dod_cleaned = self.parameterAsOutputLayer(parameters, self.OUTPUT_DOD, context)

        # -----------------------------------------
        # COMPUTE SLOPE PARAMETERS
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo(f"Computing slope parameter")

        if os.path.exists(dod_slope):
            feedback.pushInfo("Slopes parameters already computed")
        else:
            feedback.pushInfo(f"Computing slopes")
            params = {
                'elevation': dod,
                'format': 0,
                'precision': 0,
                '-a': True,
                '-e': True,
                '-n': False,
                'zscale': 1,
                'min_slope': 0,
                'slope': dod_slope,
                'dx': dod_dx,
                'dy': dod_dy,
                'dxx': dod_dxx,
                'dyy': dod_dyy,
                'dxy': dod_dxy,
                'GRASS_REGION_PARAMETER': None,
                'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                'GRASS_RASTER_FORMAT_OPT': '',
                'GRASS_RASTER_FORMAT_META': ''
            }

            slopes_lyr = processing.run(
                "grass7:r.slope.aspect",
                params,
                context=context,
                feedback=feedback
            )

        # -----------------------------------------
        # CREATE MASK LAYER
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Generating raster mask layer")

        layers = [
            QgsRasterLayer(slopes_lyr['slope']),
            QgsRasterLayer(slopes_lyr['dx']),
            QgsRasterLayer(slopes_lyr['dy']),
            QgsRasterLayer(slopes_lyr['dxx']),
            QgsRasterLayer(slopes_lyr['dyy']),
            QgsRasterLayer(slopes_lyr['dxy'])
        ]

        # Paramètre de la calculatrice raster
        entries = []
        for idx, layer in enumerate(layers):
            entry = QgsRasterCalculatorEntry()
            entry.ref = f'ras{idx}@1'
            entry.raster = layer
            entry.bandNumber = 1
            entries.append(entry)

        calc = QgsRasterCalculator(
            "(abs('ras0@1')>=77) OR (abs('ras1@1')>=5) OR (abs('ras2@1')>=5) OR (abs('ras3@1')>=150) OR (abs('ras4@1')>=150) OR (abs('ras5@1')>=40)",
            # Expression
            slope_mask,  # Output
            'GTiff',  # Format
            dod.extent(), dod.width(), dod.height(),  # Extents
            entries  # Les rasters en entrées
        )
        calc.processCalculation()

        # POLYGONIZE
        feedback.pushInfo(" ")
        feedback.pushInfo("Polygonizing")

        params = {
            'INPUT': slope_mask,
            'BAND': 1,
            'FIELD': 'DN',
            'EIGHT_CONNECTEDNESS': False,
            'EXTRA': '',
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }

        mask_pol = processing.run(
            "gdal:polygonize",
            params,
            context=context,
            feedback=feedback
        )
        mask_pol_lyr = mask_pol['OUTPUT']

        # -----------------------------------------
        # Extract slope
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Filtering vectorial mask")

        alg_params = {
            'EXPRESSION': '"DN" = 0',
            'INPUT': mask_pol_lyr,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }
        poly_filtered = processing.run('native:extractbyexpression',
                                alg_params,
                                context=context,
                                feedback=feedback)
        poly_filtered_lyr = poly_filtered['OUTPUT']

        # -----------------------------------------
        # CLIP DOD BY MASK
        # -----------------------------------------
        feedback.pushInfo(" ")
        feedback.pushInfo("Clip DOD by mask")

        params = {
            'INPUT': dod,
            'MASK': poly_filtered_lyr,
            'SOURCE_CRS': None,
            'TARGET_CRS': None,
            'TARGET_EXTENT': None,
            'NODATA': None,
            'ALPHA_BAND': False,
            'CROP_TO_CUTLINE': True,
            'KEEP_RESOLUTION': False,
            'SET_RESOLUTION': False,
            'X_RESOLUTION': None,
            'Y_RESOLUTION': None,
            'MULTITHREADING': False,
            'OPTIONS': '',
            'DATA_TYPE': 0,
            'EXTRA': '',
            'OUTPUT': dod_cleaned
        }

        dod_clip = processing.run(
            "gdal:cliprasterbymasklayer",
            params,
            context=context,
            feedback=feedback
        )
        dod_clip_lyr = dod_clip['OUTPUT']

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {
            self.OUTPUT_DX: dod_dx,
            self.OUTPUT_DY: dod_dy,
            self.OUTPUT_DXX: dod_dxx,
            self.OUTPUT_DYY: dod_dyy,
            self.OUTPUT_DXY: dod_dxy,
            self.OUTPUT_MASK: slope_mask,
            self.OUTPUT_DOD: dod_clip_lyr,
        }

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Remove border effect'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'DOD processing'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return SlopeIndentifierAlgorithm()
